use crate::windivert::Packet;

/// Check if the given packet is a TLS ClientHello message
/// This is a very naive check and may not cover all cases
/// but works for most common scenarios
/// It checks if the first byte is 0x16 (Handshake)
/// and the sixth byte is 0x01 (ClientHello)
///
/// # Safety
/// This function assumes that the packet has a valid TCP payload
pub fn is_client_hello(packet: &Packet<'_>) -> bool {
    let data = packet.data_unchecked();

    data.first().map(|&b| b == 0x16).unwrap_or(false) // Handshake
        && data.get(5).map(|&b| b == 0x01).unwrap_or(false) // ClientHello
}

/// A minimal HTTP GET request for "http://www.w3.org/"
pub const FAKE_HTTP_REQUEST: &[u8] =
    b"GET / HTTP/1.1\r\nHost: www.w3.org\r\nUser-Agent: curl/8.14.1\r\nAccept: */*\r\nAccept-Encoding: deflate, gzip, br\r\n\r\n";

/// A minimal TLS ClientHello packet with SNI "www.w3.org"
pub const FAKE_CLIENT_HELLO: &[u8] = &[
    0x16, 0x3, 0x1, 0x1, 0xc8, 0x1, 0x0, 0x1, 0xc4, 0x3, 0x3, 0x2, 0x76, 0xf, 0x16, 0x9d, 0x77,
    0x2f, 0x3e, 0xaf, 0xa1, 0xf7, 0x92, 0x1d, 0xde, 0xd6, 0x7, 0xdb, 0xe0, 0xfb, 0xe7, 0x45, 0x52,
    0x82, 0x18, 0xfb, 0x1d, 0xd3, 0x3, 0x39, 0x10, 0x36, 0xcc, 0x20, 0xaf, 0xa2, 0x23, 0x41, 0xef,
    0x3b, 0x2f, 0x8b, 0xaa, 0xdc, 0x14, 0x1e, 0x9e, 0x29, 0x40, 0x7b, 0x28, 0x48, 0x73, 0x95, 0xd3,
    0x6b, 0xe5, 0x26, 0x9a, 0xdf, 0x59, 0x47, 0xfc, 0xd, 0x6c, 0x92, 0x0, 0x28, 0x13, 0x2, 0x13,
    0x1, 0xc0, 0x2c, 0xc0, 0x2b, 0xc0, 0x30, 0xc0, 0x2f, 0xc0, 0x24, 0xc0, 0x23, 0xc0, 0x28, 0xc0,
    0x27, 0xc0, 0xa, 0xc0, 0x9, 0xc0, 0x14, 0xc0, 0x13, 0x0, 0x9d, 0x0, 0x9c, 0x0, 0x3d, 0x0, 0x3c,
    0x0, 0x35, 0x0, 0x2f, 0x1, 0x0, 0x1, 0x53, 0x0, 0x0, 0x0, 0xf, 0x0, 0xd, 0x0, 0x0, 0xa, 0x77,
    0x77, 0x77, 0x2e, 0x77, 0x33, 0x2e, 0x6f, 0x72, 0x67, 0x0, 0x5, 0x0, 0x5, 0x1, 0x0, 0x0, 0x0,
    0x0, 0x0, 0x2b, 0x0, 0x9, 0x8, 0x3, 0x4, 0x3, 0x3, 0x3, 0x2, 0x3, 0x1, 0x0, 0xd, 0x0, 0x1a,
    0x0, 0x18, 0x8, 0x4, 0x8, 0x5, 0x8, 0x6, 0x4, 0x1, 0x5, 0x1, 0x2, 0x1, 0x4, 0x3, 0x5, 0x3, 0x2,
    0x3, 0x2, 0x2, 0x6, 0x1, 0x6, 0x3, 0x0, 0x23, 0x0, 0x0, 0x0, 0xa, 0x0, 0x8, 0x0, 0x6, 0x0,
    0x1d, 0x0, 0x17, 0x0, 0x18, 0x0, 0xb, 0x0, 0x2, 0x1, 0x0, 0x0, 0x10, 0x0, 0xb, 0x0, 0x9, 0x8,
    0x68, 0x74, 0x74, 0x70, 0x2f, 0x31, 0x2e, 0x31, 0x0, 0x33, 0x0, 0xd0, 0x0, 0xce, 0x0, 0x1d,
    0x0, 0x20, 0x43, 0x1e, 0x84, 0x91, 0xa0, 0x41, 0x63, 0x87, 0xed, 0xa, 0x47, 0x10, 0x93, 0xe6,
    0xb5, 0xe9, 0xb3, 0xe6, 0x1a, 0x8e, 0x67, 0xc7, 0xd5, 0x47, 0x83, 0xe2, 0xef, 0x25, 0xba, 0x9d,
    0x59, 0x5, 0x0, 0x17, 0x0, 0x41, 0x4, 0xc9, 0xc3, 0xe1, 0x4a, 0x2b, 0xca, 0x64, 0x79, 0x7c,
    0x28, 0x1e, 0x58, 0xd7, 0x3d, 0x3d, 0xd4, 0x89, 0x44, 0xee, 0x67, 0x0, 0xfb, 0xbe, 0xd7, 0xde,
    0x2c, 0x13, 0x81, 0xd5, 0x63, 0x8a, 0xd7, 0xb0, 0x96, 0xcf, 0x5e, 0x4b, 0x7b, 0x55, 0x23, 0x8f,
    0xd9, 0x86, 0x8b, 0xb7, 0x18, 0xb9, 0x9c, 0x56, 0x63, 0x1f, 0x79, 0xfb, 0xe6, 0x3e, 0xe, 0x7e,
    0xee, 0xe8, 0x69, 0x5b, 0xf6, 0x35, 0xc5, 0x0, 0x18, 0x0, 0x61, 0x4, 0xbd, 0xf3, 0x53, 0x58,
    0xe6, 0xc0, 0x56, 0x3a, 0x56, 0x57, 0x18, 0x8d, 0xa6, 0x3f, 0xf9, 0xc9, 0xba, 0x83, 0xbc, 0x39,
    0x96, 0x8d, 0xbd, 0x2, 0xe1, 0x18, 0xa5, 0x4b, 0xfc, 0xd8, 0xbf, 0x5b, 0xc3, 0x7, 0x5c, 0xfc,
    0xc5, 0x9f, 0xdd, 0xef, 0x2b, 0xdc, 0xe6, 0x3, 0x96, 0x6a, 0xd4, 0xa7, 0x18, 0x10, 0x63, 0x67,
    0x5c, 0x54, 0xd9, 0x38, 0xd9, 0xe6, 0xd, 0x6e, 0x4d, 0x40, 0xeb, 0x57, 0xb0, 0x5, 0x1d, 0x6e,
    0x58, 0xb9, 0x67, 0xe7, 0xa1, 0xf1, 0x6d, 0x48, 0xc0, 0xd, 0xdd, 0xa9, 0x14, 0xb1, 0x41, 0x41,
    0x89, 0x20, 0xbf, 0xbe, 0x2f, 0x83, 0x9b, 0x95, 0x50, 0x65, 0x7b, 0x3f, 0x0, 0x31, 0x0, 0x0,
    0x0, 0x17, 0x0, 0x0, 0xff, 0x1, 0x0, 0x1, 0x0, 0x0, 0x2d, 0x0, 0x2, 0x1, 0x1,
];
